ğŸ”§ AtualizaÃ§Ãµes necessÃ¡rias
1. Prefetch â†’ experiÃªncia rÃ¡pida

 Implementar prefetch on hover/touch em todos os links (mouseenter, touchstart).

 Manter cache (pageCache) para evitar fetch duplicado.

 Talvez criar um limite (ex: nÃ£o prefetchar mais que X pÃ¡ginas por vez).

2. History Router â†’ URLs limpas

 Migrar de location.hash para history.pushState.

 Alterar o listener de rota para popstate.

 Ajustar navigateTo(path) para usar pushState + carregar pÃ¡gina.

 Configurar servidor para fallback (/* â†’ index.html) senÃ£o vai dar 404 ao recarregar.

3. Lazy Loading â†’ sÃ³ carrega o que precisa

 Separar JS de cada pÃ¡gina em chunks.

 Usar import() dinÃ¢mico ao entrar em cada rota.

 Continuar usando lazy load de estilos (jÃ¡ existente).

 Opcional: carregar imagens pesadas com loading="lazy".

4. Router Config â†’ organizaÃ§Ã£o estilo framework

 Transformar routes de array simples em objeto robusto:

const routes = [
  { path: "/", page: "home.html", title: "Home", guard: null, layout: "main" },
  { path: "/login", page: "login.html", title: "Login", guard: "guestOnly", layout: "auth" }
];


 Suporte para guards (auth, permissÃµes).

 Suporte para layouts diferentes (main, auth, etc.).

 Middleware antes e depois da navegaÃ§Ã£o (beforeEnter, afterEnter).

5. Extra â†’ Progressive Enhancement

 Servir versÃ£o estÃ¡tica de cada pÃ¡gina (HTML pronto).

 Se o usuÃ¡rio nÃ£o tiver JS, o site ainda abre (sem SPA, mas funcional).

 Melhor para SEO + acessibilidade.

ğŸ“Œ Resumo da ordem prÃ¡tica para implementar:

Prefetch (rÃ¡pido e fÃ¡cil).

History Router (URLs limpas).

Router Config (organizaÃ§Ã£o).

Lazy Loading via import().

Progressive Enhancement (opcional, mais avanÃ§ado).